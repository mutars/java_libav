package com.mutar.libav.bridge.avutil;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * Buffer to print data progressively<br>
 * The string buffer grows as necessary and is always 0-terminated.<br>
 * The content of the string is never accessed, and thus is<br>
 * encoding-agnostic and can even hold binary data.<br>
 * Small buffers are kept in the structure itself, and thus require no<br>
 * memory allocation at all (unless the contents of the buffer is needed<br>
 * after the structure goes out of scope). This is almost as lightweight as<br>
 * declaring a local "char buf[512]".<br>
 * The length of the string can go beyond the allocated size: the buffer is<br>
 * then truncated, but the functions still keep account of the actual total<br>
 * length.<br>
 * In other words, buf->len can be greater than buf->size and records the<br>
 * total length of what would have been to the buffer if there had been<br>
 * enough memory.<br>
 * Append operations do not need to be tested for failure: if a memory<br>
 * allocation fails, data stop being appended to the buffer, but the length<br>
 * is still updated. This situation can be tested with<br>
 * av_bprint_is_complete().<br>
 * The size_max field determines several possible behaviours:<br>
 * size_max = -1 (= UINT_MAX) or any large value will let the buffer be<br>
 * reallocated as necessary, with an amortized linear cost.<br>
 * size_max = 0 prevents writing anything to the buffer: only the total<br>
 * length is computed. The write operations can then possibly be repeated in<br>
 * a buffer with exactly the necessary size<br>
 * (using size_init = size_max = len + 1).<br>
 * size_max = 1 is automatically replaced by the exact size available in the<br>
 * structure itself, thus ensuring no dynamic memory allocation. The<br>
 * internal buffer is large enough to hold a reasonable paragraph of text,<br>
 * such as the current paragraph.<br>
 * <i>native declaration : ffmpeg_build/include/libavutil/bprint.h:37</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avutil") 
public class ff_pad_helper_AVBPrint extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : char* */
	@Field(0) 
	public Pointer<Byte > str() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : char* */
	@Field(0) 
	public ff_pad_helper_AVBPrint str(Pointer<Byte > str) {
		this.io.setPointerField(this, 0, str);
		return this;
	}
	@Field(1) 
	public int len() {
		return this.io.getIntField(this, 1);
	}
	@Field(1) 
	public ff_pad_helper_AVBPrint len(int len) {
		this.io.setIntField(this, 1, len);
		return this;
	}
	@Field(2) 
	public int size() {
		return this.io.getIntField(this, 2);
	}
	@Field(2) 
	public ff_pad_helper_AVBPrint size(int size) {
		this.io.setIntField(this, 2, size);
		return this;
	}
	@Field(3) 
	public int size_max() {
		return this.io.getIntField(this, 3);
	}
	@Field(3) 
	public ff_pad_helper_AVBPrint size_max(int size_max) {
		this.io.setIntField(this, 3, size_max);
		return this;
	}
	/** C type : char[1] */
	@Array({1}) 
	@Field(4) 
	public Pointer<Byte > reserved_internal_buffer() {
		return this.io.getPointerField(this, 4);
	}
	public ff_pad_helper_AVBPrint() {
		super();
	}
	public ff_pad_helper_AVBPrint(Pointer pointer) {
		super(pointer);
	}
}
